// ClientUI.java
package myrmi;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;

public class ClientUI extends JFrame {

    private FileTransferClient client;

    private JList<String> fileList;
    private DefaultListModel<String> fileListModel;
    private JProgressBar progressBar;
    private JLabel statusLabel;
    private JButton uploadButton;
    private JButton downloadButton;
    private JButton refreshButton;
    private JTextField downloadPathField;
    private JButton browseDownloadPathButton; // New button for choosing download path

    public ClientUI(String host, int port) {
        super("Distributed File Manager (RMI)");
        try {
            client = new FileTransferClient(host, port);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to connect to RMI services: " + e.getMessage(), "Connection Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }

        initComponents();
        setupLayout();
        addListeners();
        loadFiles(); // Load files on startup
    }

    private void initComponents() {
        fileListModel = new DefaultListModel<>();
        fileList = new JList<>(fileListModel);
        fileList.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        fileList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        fileList.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        // Set custom cell renderer for icons
        fileList.setCellRenderer(new FileListCellRenderer()); // <-- NEW: Custom Renderer

        uploadButton = new JButton("Upload File");
        downloadButton = new JButton("Download Selected");
        refreshButton = new JButton("Refresh List");
        browseDownloadPathButton = new JButton("Browse"); // <-- NEW Button

        // Styling buttons
        customizeButton(uploadButton);
        customizeButton(downloadButton);
        customizeButton(refreshButton);
        customizeButton(browseDownloadPathButton); // Style the new button

        progressBar = new JProgressBar(0, 100);
        progressBar.setStringPainted(true); // Show percentage
        progressBar.setVisible(false); // Hide until active

        statusLabel = new JLabel("Ready.");
        statusLabel.setFont(new Font("Segoe UI", Font.ITALIC, 12));
        statusLabel.setBorder(new EmptyBorder(5, 0, 0, 0));

        downloadPathField = new JTextField(System.getProperty("user.home") + File.separator + "Downloads");
        downloadPathField.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        downloadPathField.setEditable(false); // Make it read-only, user will use browse button
    }

    private void customizeButton(JButton button) {
        button.setBackground(new Color(60, 140, 200)); // A nice blue
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setFont(new Font("Segoe UI", Font.BOLD, 12));
        button.setBorder(BorderFactory.createEmptyBorder(8, 15, 8, 15));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(70, 150, 210));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(60, 140, 200));
            }
        });
    }

    private void setupLayout() {
        setLayout(new BorderLayout(10, 10)); // Padding between components
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); // Overall padding

        // Top Panel for Controls
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        topPanel.add(uploadButton);
        topPanel.add(downloadButton);
        topPanel.add(refreshButton);
        
        // Download Path Panel
        JPanel downloadPathSelectionPanel = new JPanel(new BorderLayout(5, 0)); // <-- NEW Panel for Download path
        downloadPathSelectionPanel.add(new JLabel("Download To:"), BorderLayout.WEST);
        downloadPathSelectionPanel.add(downloadPathField, BorderLayout.CENTER);
        downloadPathSelectionPanel.add(browseDownloadPathButton, BorderLayout.EAST); // <-- Add Browse button
        
        // Add downloadPathSelectionPanel to the main top panel
        topPanel.add(downloadPathSelectionPanel); // Add to top panel after buttons


        // Center Panel for File List
        JScrollPane scrollPane = new JScrollPane(fileList);
        scrollPane.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Available Files"
        ));
        scrollPane.setPreferredSize(new Dimension(500, 300)); // Set preferred size for the list

        // Bottom Panel for Progress and Status
        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));
        bottomPanel.add(progressBar);
        bottomPanel.add(statusLabel);
        statusLabel.setAlignmentX(Component.LEFT_ALIGNMENT); // Align status label to the left
        progressBar.setAlignmentX(Component.LEFT_ALIGNMENT); // Align progress bar to the left

        mainPanel.add(topPanel, BorderLayout.NORTH);
        mainPanel.add(scrollPane, BorderLayout.CENTER);
        mainPanel.add(bottomPanel, BorderLayout.SOUTH);

        add(mainPanel, BorderLayout.CENTER);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(700, 500); // Initial window size
        setMinimumSize(new Dimension(600, 400)); // Prevent too small resizing
        setLocationRelativeTo(null); // Center the window
    }

    private void addListeners() {
        uploadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Select File to Upload");
                int returnValue = fileChooser.showOpenDialog(ClientUI.this);
                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    if (selectedFile != null) {
                        uploadFile(selectedFile);
                    }
                }
            }
        });

        browseDownloadPathButton.addActionListener(new ActionListener() { // <-- NEW Listener
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser dirChooser = new JFileChooser();
                dirChooser.setDialogTitle("Select Download Directory");
                dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                dirChooser.setAcceptAllFileFilterUsed(false); // Only allow directories
                
                // Set initial directory to current value in the field
                File currentDir = new File(downloadPathField.getText());
                if (currentDir.exists() && currentDir.isDirectory()) {
                    dirChooser.setCurrentDirectory(currentDir);
                } else {
                    dirChooser.setCurrentDirectory(new File(System.getProperty("user.home"))); // Default to user home
                }

                int returnValue = dirChooser.showSaveDialog(ClientUI.this); // showSaveDialog is suitable for choosing output dir
                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    File selectedDirectory = dirChooser.getSelectedFile();
                    if (selectedDirectory != null) {
                        downloadPathField.setText(selectedDirectory.getAbsolutePath());
                    }
                }
            }
        });

        downloadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedFile = fileList.getSelectedValue();
                if (selectedFile == null || selectedFile.equals("No files available.")) { // Handle the "No files" entry
                    JOptionPane.showMessageDialog(ClientUI.this, "Please select a valid file to download.", "No File Selected", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                String downloadDir = downloadPathField.getText();
                File dir = new File(downloadDir);
                // Ensure directory exists or can be created
                if (!dir.exists()) {
                    if (!dir.mkdirs()) {
                        JOptionPane.showMessageDialog(ClientUI.this, "Cannot create download directory: " + downloadDir, "Directory Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } else if (!dir.isDirectory()) { // If it exists but is a file
                    JOptionPane.showMessageDialog(ClientUI.this, "Download path is a file, not a directory: " + downloadDir, "Directory Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                downloadFile(selectedFile, downloadDir);
            }
        });

        refreshButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadFiles();
            }
        });

        // Add a window listener to properly shut down the executor service
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                if (client != null) {
                    client.shutdown();
                }
                System.exit(0);
            }
        });
    }

    private void loadFiles() {
        statusLabel.setText("Loading files...");
        new SwingWorker<List<String>, Void>() {
            @Override
            protected List<String> doInBackground() throws Exception {
                return client.listAvailableFiles();
            }

            @Override
            protected void done() {
                try {
                    List<String> files = get();
                    fileListModel.clear();
                    if (files.isEmpty()) {
                        fileListModel.addElement("No files available."); // Placeholder for empty list
                    } else {
                        for (String file : files) {
                            fileListModel.addElement(file);
                        }
                    }
                    statusLabel.setText("Files loaded.");
                } catch (Exception e) {
                    statusLabel.setText("Error loading files.");
                    JOptionPane.showMessageDialog(ClientUI.this, "Error loading files: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }
        }.execute();
    }

    private void uploadFile(File file) {
        statusLabel.setText("Uploading '" + file.getName() + "'...");
        progressBar.setValue(0);
        progressBar.setVisible(true);
        setButtonsEnabled(false);

        client.uploadFile(file,
            progress -> SwingUtilities.invokeLater(() -> progressBar.setValue(progress)), // Update progress on EDT
            () -> SwingUtilities.invokeLater(() -> { // On complete
                statusLabel.setText("Upload of '" + file.getName() + "' complete!");
                progressBar.setVisible(false);
                setButtonsEnabled(true);
                loadFiles(); // Refresh list after upload
            }),
            error -> SwingUtilities.invokeLater(() -> { // On error
                statusLabel.setText("Upload failed for '" + file.getName() + "'.");
                progressBar.setVisible(false);
                setButtonsEnabled(true);
                JOptionPane.showMessageDialog(ClientUI.this, "Upload failed: " + error.getMessage(), "Upload Error", JOptionPane.ERROR_MESSAGE);
            })
        );
    }

    private void downloadFile(String fileName, String outputDir) {
        statusLabel.setText("Downloading '" + fileName + "' to " + outputDir + "...");
        progressBar.setValue(0);
        progressBar.setVisible(true);
        setButtonsEnabled(false);

        client.downloadFile(fileName, outputDir,
            progress -> SwingUtilities.invokeLater(() -> progressBar.setValue(progress)), // Update progress on EDT
            () -> SwingUtilities.invokeLater(() -> { // On complete
                statusLabel.setText("Download of '" + fileName + "' complete!");
                progressBar.setVisible(false);
                setButtonsEnabled(true);
            }),
            error -> SwingUtilities.invokeLater(() -> { // On error
                statusLabel.setText("Download failed for '" + fileName + "'.");
                progressBar.setVisible(false);
                setButtonsEnabled(true);
                JOptionPane.showMessageDialog(ClientUI.this, "Download failed: " + error.getMessage(), "Download Error", JOptionPane.ERROR_MESSAGE);
            })
        );
    }

    private void setButtonsEnabled(boolean enabled) {
        uploadButton.setEnabled(enabled);
        downloadButton.setEnabled(enabled);
        refreshButton.setEnabled(enabled);
        // Only disable browse button during active transfers
        browseDownloadPathButton.setEnabled(enabled);
    }

    public static void main(String[] args) {
        // Run the UI on the Event Dispatch Thread (EDT)
        SwingUtilities.invokeLater(() -> {
            ClientUI frame = new ClientUI("localhost", 1099); // Connect to localhost RMI Registry
            frame.setVisible(true);
        });
    }

    // --- NEW: Custom ListCellRenderer for file icons ---
    class FileListCellRenderer extends DefaultListCellRenderer {
        private Icon folderIcon;
        private Icon fileIcon;
        private Icon documentIcon; // For .txt, .doc, etc.
        private Icon imageIcon;    // For .jpg, .png, etc.
        private Icon audioIcon;    // For .mp3, .wav, etc.
        private Icon videoIcon;    // For .mp4, .avi, etc.

        public FileListCellRenderer() {
            // Load generic icons, ideally from resources or a utility
            // For simplicity, we'll use system icons or basic ones.
            // In a real app, you'd have these in your project's 'res' folder.
            folderIcon = UIManager.getIcon("FileView.directoryIcon");
            fileIcon = UIManager.getIcon("FileView.fileIcon");
            documentIcon = UIManager.getIcon("FileView.documentIcon");
            imageIcon = UIManager.getIcon("FileView.hardDriveIcon"); // Placeholder
            audioIcon = UIManager.getIcon("FileView.computerIcon"); // Placeholder
            videoIcon = UIManager.getIcon("FileView.floppyDriveIcon"); // Placeholder

            // Try to get more specific icons if possible
            // Note: These might not always be available or look good across all OS/Look&Feels
            try {
                // You might need to provide custom icons for better aesthetics
                // Example: new ImageIcon(getClass().getResource("/icons/document.png"));
                // For now, using UIManager defaults.
            } catch (Exception e) {
                // Fallback to generic if specific icons fail
            }
        }

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                                                      boolean isSelected, boolean cellHasFocus) {
            JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

            String fileName = (String) value;
            if (fileName == null || fileName.isEmpty() || fileName.equals("No files available.")) {
                label.setIcon(null); // No icon for placeholder or empty
            } else {
                // Determine icon based on file extension
                Icon icon = getIconForFileExtension(fileName);
                label.setIcon(icon);
            }
            return label;
        }

        private Icon getIconForFileExtension(String fileName) {
            String lowerCaseFileName = fileName.toLowerCase();
            if (lowerCaseFileName.endsWith(".txt") || lowerCaseFileName.endsWith(".doc") ||
                lowerCaseFileName.endsWith(".docx") || lowerCaseFileName.endsWith(".pdf")) {
                return documentIcon;
            } else if (lowerCaseFileName.endsWith(".jpg") || lowerCaseFileName.endsWith(".jpeg") ||
                       lowerCaseFileName.endsWith(".png") || lowerCaseFileName.endsWith(".gif")) {
                return imageIcon;
            } else if (lowerCaseFileName.endsWith(".mp3") || lowerCaseFileName.endsWith(".wav") ||
                       lowerCaseFileName.endsWith(".aac")) {
                return audioIcon;
            } else if (lowerCaseFileName.endsWith(".mp4") || lowerCaseFileName.endsWith(".avi") ||
                       lowerCaseFileName.endsWith(".mov")) {
                return videoIcon;
            }
            // Default icon for unknown file types
            return fileIcon;
        }
    }
}